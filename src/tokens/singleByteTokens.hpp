#ifndef SINGLEBYTETOKENS_HPP
#define SINGLEBYTETOKENS_HPP

// See 2ByteSequences.md for more information

const std::unordered_map<char, std::wstring> single_byte_tokens = {
  { 0x00, L"[error: unused code point]" },
  { 0x0A, L"r" },
  { 0x0B, L"\u00B0" },
  { 0x0C, L"\05BF\u00B9" },
  { 0x0D, L"\u00B2" },
  { 0x0E, L"T" },
  { 0x0F, L"\u00B3" },
  { 0x01, L"\u25BADMS" },
  { 0x10, L"(" },
  { 0x11, L")" },
  { 0x12, L"round(" },
  { 0x13, L"pxl-Test(" },
  { 0x14, L"augment(" },
  { 0x15, L"rowSwap(" },
  { 0x16, L"row+(" },
  { 0x17, L"*row(" },
  { 0x18, L"*row+(" },
  { 0x19, L"max(" },
  { 0x1A, L"min(" },
  { 0x1B, L"R\u25BAPr(" },
  { 0x1C, L"R\u25BAP\u03B8(" },
  { 0x1D, L"P\u25BARx(" },
  { 0x1E, L"P\u25BARy" },
  { 0x1F, L"median(" },
  { 0x02, L"\u25BADec" },
  { 0x20, L"randM(" },
  { 0x21, L"mean(" },
  { 0x22, L"solve(" },
  { 0x23, L"seq(" },
  { 0x24, L"fnInt(" },
  { 0x25, L"nDeriv(" },
  { 0x26, L"[error: unused code point]" },
  { 0x27, L"fMin(" },
  { 0x28, L"fMax(" },
  { 0x29, L" " },
  { 0x2A, L"\"" },
  { 0x2B, L"," },
  { 0x2C, L"i" },
  { 0x2D, L"!" },
  { 0x2E, L"CubicReg" },
  { 0x2F, L"QuartReg" },
  { 0x03, L"\u25BAFrac" },
  { 0x30, L"0" },
  { 0x31, L"1" },
  { 0x32, L"2" },
  { 0x33, L"3" },
  { 0x34, L"4" },
  { 0x35, L"5" },
  { 0x36, L"6" },
  { 0x37, L"7" },
  { 0x38, L"8" },
  { 0x39, L"9" },
  { 0x3A, L"." },
  { 0x3B, L"E" },
  { 0x3C, L"or" },
  { 0x3D, L"xor" },
  { 0x3E, L":" },
  { 0x3F, L"\n" },
  { 0x04, L"\u2192" },
  { 0x40, L"and" },
  { 0x41, L"A" },
  { 0x42, L"B" },
  { 0x43, L"C" },
  { 0x44, L"D" },
  { 0x45, L"E" },
  { 0x46, L"F" },
  { 0x47, L"G" },
  { 0x48, L"H" },
  { 0x49, L"I" },
  { 0x4A, L"J" },
  { 0x4B, L"K" },
  { 0x4C, L"L" },
  { 0x4D, L"M" },
  { 0x4E, L"N" },
  { 0x4F, L"O" },
  { 0x05, L"Boxplot" },
  { 0x50, L"P" },
  { 0x51, L"Q" },
  { 0x52, L"R" },
  { 0x53, L"S" },
  { 0x54, L"T" },
  { 0x55, L"U" },
  { 0x56, L"V" },
  { 0x57, L"W" },
  { 0x58, L"X" },
  { 0x59, L"Y" },
  { 0x5A, L"Z" },
  { 0x5B, L"\u03B8" },
  { 0x5C, L"[error: unknown 2-byte code]" },
  { 0x5D, L"[error: unknown 2-byte code]" },
  { 0x5E, L"[error: unknown 2-byte code]" },
  { 0x5F, L"prgm" },
  { 0x06, L"[" },
  { 0x60, L"[error: unknown 2-byte code]" },
  { 0x61, L"[error: unknown 2-byte code]" },
  { 0x62, L"[error: unknown 2-byte code]" },
  { 0x63, L"[error: unknown 2-byte code]" },
  { 0x64, L"Radian" },
  { 0x65, L"Degree" },
  { 0x66, L"Normal" },
  { 0x67, L"Sci" },
  { 0x68, L"Eng" },
  { 0x69, L"Float" },
  { 0x6A, L"=" },
  { 0x6B, L"<" },
  { 0x6C, L">" },
  { 0x6D, L"\u2264" },
  { 0x6E, L"\u2266" },
  { 0x6F, L"\u2260" },
  { 0x07, L"]" },
  { 0x70, L"+" },
  { 0x71, L"-" },
  { 0x72, L"Ans" },
  { 0x73, L"Fix" },
  { 0x74, L"Horiz" },
  { 0x75, L"Full" },
  { 0x76, L"Func" },
  { 0x77, L"Param" },
  { 0x78, L"Polar" },
  { 0x79, L"Seq" },
  { 0x7A, L"IndpntAuto" },
  { 0x7B, L"IndpntAsk" },
  { 0x7C, L"DependAuto" },
  { 0x7D, L"DependAsk" },
  { 0x7E, L"[error: unknown 2-byte code]" },
  { 0x7F, L"[square mark]" },
  { 0x08, L"{" },
  { 0x80, L"[plus mark]" },
  { 0x81, L"[dot mark]" },
  { 0x82, L"*" },
  { 0x83, L"/" },
  { 0x84, L"Trace" },
  { 0x85, L"ClrDraw" },
  { 0x86, L"ZStandard" },
  { 0x87, L"ZTrig" },
  { 0x88, L"ZBox" },
  { 0x89, L"Zoom In" },
  { 0x8A, L"Zoom Out" },
  { 0x8B, L"ZSquare" },
  { 0x8C, L"ZInteger" },
  { 0x8D, L"ZPrevious" },
  { 0x8E, L"ZDecimal" },
  { 0x8F, L"ZoomStat" },
  { 0x09, L"}" },
  { 0x90, L"ZoomRcl" },
  { 0x91, L"PrintScreen" },
  { 0x92, L"ZoomSto" },
  { 0x93, L"Text(" },
  { 0x94, L" nPr " },
  { 0x95, L" nCr " },
  { 0x96, L"FnOn" },
  { 0x97, L"FnOff" },
  { 0x98, L"StorePic" },
  { 0x99, L"RecallPic" },
  { 0x9A, L"StoreGDB" },
  { 0x9B, L"RecallGDB" },
  { 0x9C, L"Line(" },
  { 0x9D, L"Vertical" },
  { 0x9E, L"Pt-On(" },
  { 0x9F, L"Pt-Off(" },
  { 0xA0, L"Pt-Change(" },
  { 0xA1, L"Pxl-On(" },
  { 0xA2, L"Pxl-Off(" },
  { 0xA3, L"Pxl-Change(" },
  { 0xA4, L"Shade(" },
  { 0xA5, L"Circle(" },
  { 0xA6, L"Horizontal" },
  { 0xA7, L"Tangent(" },
  { 0xA8, L"DrawInv" },
  { 0xA9, L"DrawF" },
  { 0xAA, L"[error: unknown 2-byte code]" },
  { 0xAB, L"rand" },
  { 0xAC, L"\u03C0" },
  { 0xAD, L"getKey" },
  { 0xAE, L"\'" },
  { 0xAF, L"\?" },
  { 0xB0, L"-" },
  { 0xB1, L"int(" },
  { 0xB2, L"abs(" },
  { 0xB3, L"det(" },
  { 0xB4, L"identity(" },
  { 0xB5, L"dim(" },
  { 0xB6, L"sum(" },
  { 0xB7, L"prod(" },
  { 0xB8, L"not(" },
  { 0xB9, L"iPart(" },
  { 0xBA, L"fPart(" },
  { 0xBB, L"[error: unknown 2-byte code]" },
  { 0xBC, L"\u221A(" },
  { 0xBD, L"\u00B3\u221A(" },
  { 0xBE, L"ln(" },
  { 0xBF, L"e^(" },
  { 0xC0, L"log(" },
  { 0xC1, L"10^(" },
  { 0xC2, L"sin(" },
  { 0xC3, L"sin\u05BF\u00B9(" },
  { 0xC4, L"cos(" },
  { 0xC5, L"cos\u05BF\u00B9(" },
  { 0xC6, L"tan(" },
  { 0xC7, L"tan\u05BF\u00B9(" },
  { 0xC8, L"sinh(" },
  { 0xC9, L"sinh\u05BF\u00B9(" },
  { 0xCA, L"cosh(" },
  { 0xCB, L"cosh\u05BF\u00B9(" },
  { 0xCC, L"tanh(" },
  { 0xCD, L"tanh\u05BF\u00B9(" },
  { 0xCE, L"If" },
  { 0xCF, L"Then" },
  { 0xD0, L"Else" },
  { 0xD1, L"While" },
  { 0xD2, L"Repeat" },
  { 0xD3, L"For(" },
  { 0xD4, L"End" },
  { 0xD5, L"Return" },
  { 0xD6, L"Lbl" },
  { 0xD7, L"Goto" },
  { 0xD8, L"Pause" },
  { 0xD9, L"Stop" },
  { 0xDA, L"IS>(" },
  { 0xDB, L"DS<(" },
  { 0xDC, L"Input " },
  { 0xDD, L"Prompt " },
  { 0xDE, L"Disp " },
  { 0xDF, L"DispGraph" },
  { 0xE0, L"Output(" },
  { 0xE1, L"ClrHome" },
  { 0xE2, L"Fill(" },
  { 0xE3, L"SortA(" },
  { 0xE4, L"SortD(" },
  { 0xE5, L"DispTable" },
  { 0xE6, L"Menu(" },
  { 0xE7, L"Send(" },
  { 0xE8, L"Get(" },
  { 0xE9, L"PlotsOn" },
  { 0xEA, L"PlotsOff" },
  { 0xEB, L"\u221F" },
  { 0xEC, L"Plot1(" },
  { 0xED, L"Plot2(" },
  { 0xEE, L"Plot3(" },
  { 0xEF, L"[error: unknown 2-byte code]" },
  { 0xF0, L"^" },
  { 0xF1, L"\u00D7\u221A" },
  { 0xF2, L"1-Var Stats" },
  { 0xF3, L"2-Var Stats" },
  { 0xF4, L"LinReg(a+bx)" },
  { 0xF5, L"ExpReg" },
  { 0xF6, L"LnReg" },
  { 0xF7, L"PwrReg" },
  { 0xF8, L"Med-Med" },
  { 0xF9, L"QuadReg" },
  { 0xFA, L"ClrList" },
  { 0xFB, L"ClrTable" },
  { 0xFC, L"Histogram" },
  { 0xFD, L"xyLine" },
  { 0xFE, L"Scatter" },
  { 0xFF, L"LinReg(ax+b)" }
};

#endif // !SINGLEBYTETOKENS_HPP
