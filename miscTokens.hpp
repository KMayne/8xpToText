#ifndef MISCTOKENS_HPP
#define MISCTOKENS_HPP

// See 2ByteSequences.md for more information

const std::unordered_map<char, std::wstring> misc_tokens = {
  { 0x00, L"npv(" },
  { 0x01, L"irr(" },
  { 0x02, L"bal(" },
  { 0x03, L"\u03a3prn(" },
  { 0x04, L"\u03a3Int(" },
  { 0x05, L"\u25baNom(" },
  { 0x06, L"\u25baEff(" },
  { 0x07, L"dbd(" },
  { 0x08, L"lcm(" },
  { 0x09, L"gcd(" },
  { 0x0A, L"randInt(" },
  { 0x0B, L"randBin(" },
  { 0x0C, L"sub(" },
  { 0x0D, L"stdDev(" },
  { 0x0E, L"variance(" },
  { 0x0F, L"inString(" },
  { 0x10, L"normalcdf(" },
  { 0x11, L"invNorm(" },
  { 0x12, L"tcdf(" },
  { 0x13, L"\u03c7\u00b2cdf(" },
  { 0x14, L"Fcdf(" },
  { 0x15, L"binompdf(" },
  { 0x16, L"binomcdf(" },
  { 0x17, L"poissonpdf(" },
  { 0x18, L"poissoncdf(" },
  { 0x19, L"geometpdf(" },
  { 0x1A, L"geometcdf(" },
  { 0x1B, L"normalpdf(" },
  { 0x1C, L"tpdf(" },
  { 0x1D, L"\u03c7\u00b2pdf(" },
  { 0x1E, L"Fpdf(" },
  { 0x1F, L"randNorm(" },
  { 0x20, L"tvm_Pmt" },
  { 0x21, L"tvm_I%%" },
  { 0x22, L"tvm_PV" },
  { 0x23, L"tvm_N" },
  { 0x24, L"tvm_FV" },
  { 0x25, L"conj(" },
  { 0x26, L"real(" },
  { 0x27, L"imag(" },
  { 0x28, L"angle(" },
  { 0x29, L"cumSum(" },
  { 0x2A, L"expr(" },
  { 0x2B, L"length(" },
  { 0x2C, L"\u0394List(" },
  { 0x2D, L"ref(" },
  { 0x2E, L"rref(" },
  { 0x2F, L"\u25baRect" },
  { 0x30, L"\u25baPolar" },
  { 0x31, L"e" },
  { 0x32, L"SinReg" },
  { 0x33, L"Logistic" },
  { 0x34, L"LinRegTTest" },
  { 0x35, L"ShadeNorm(" },
  { 0x36, L"Shade_t(" },
  { 0x37, L"Shade\u03c7\u00b2" },
  { 0x38, L"ShadeF(" },
  { 0x39, L"Matr\u25balist(" },
  { 0x3A, L"List\u25bamatr(" },
  { 0x3B, L"Z-Test(" },
  { 0x3C, L"T-Test" },
  { 0x3D, L"2-SampZTest(" },
  { 0x3E, L"1-PropZTest(" },
  { 0x3F, L"2-PropZTest(" },
  { 0x40, L"\u03c7\u00b2-Test(" },
  { 0x41, L"ZInterval" },
  { 0x42, L"2-SampZInt(" },
  { 0x43, L"1-PropZInt(" },
  { 0x44, L"2-PropZInt(" },
  { 0x45, L"GraphStyle(" },
  { 0x46, L"2-SampTTest" },
  { 0x47, L"2-SampFTest" },
  { 0x48, L"TInterval" },
  { 0x49, L"2-SampTInt" },
  { 0x4A, L"SetUpEditor" },
  { 0x4B, L"Pmt_End" },
  { 0x4C, L"Pmt_Bgn" },
  { 0x4D, L"Real" },
  { 0x4E, L"re^\u03b8i" },
  { 0x4F, L"a+bi" },
  { 0x50, L"ExprOn" },
  { 0x51, L"ExprOff" },
  { 0x52, L"ClrAllLists" },
  { 0x53, L"GetCalc(" },
  { 0x54, L"DelVar" },
  { 0x55, L"Equ\u25baString(" },
  { 0x56, L"String\u25baEqu(" },
  { 0x57, L"Clear Entries" },
  { 0x58, L"Select(" },
  { 0x59, L"ANOVA(" },
  { 0x5A, L"ModBoxplot" },
  { 0x5B, L"NormProbPlot" },
  { 0x5C, L"[error: unused code point]" },
  { 0x5D, L"[error: unused code point]" },
  { 0x5E, L"[error: unused code point]" },
  { 0x5F, L"[error: unused code point]" },
  { 0x60, L"[error: unused code point]" },
  { 0x61, L"[error: unused code point]" },
  { 0x62, L"[error: unused code point]" },
  { 0x63, L"[error: unused code point]" },
  { 0x64, L"G-T" },
  { 0x65, L"ZoomFit" },
  { 0x66, L"DiagnosticOn" },
  { 0x67, L"DiagnosticOff" },
  { 0x68, L"Archive" },
  { 0x69, L"UnArchive" },
  { 0x6A, L"Asm(" },
  { 0x6B, L"AsmComp(" },
  { 0x6C, L"AsmPrgm" },
  { 0x6D, L"compiled asm" },
  { 0x6E, L"\u00c1" },
  { 0x6F, L"\u00c0" },
  { 0x70, L"\u00c2" },
  { 0x71, L"\u00c4" },
  { 0x72, L"\u00e1" },
  { 0x73, L"\u00e0" },
  { 0x74, L"\u00e2" },
  { 0x75, L"\u00e4" },
  { 0x76, L"\u00c9" },
  { 0x77, L"\u00c8" },
  { 0x78, L"\u00ca" },
  { 0x79, L"\u00cb" },
  { 0x7A, L"\u00e9" },
  { 0x7B, L"\u00e8" },
  { 0x7C, L"\u00ea" },
  { 0x7D, L"\u00eb" },
  { 0x7E, L"[error: unused code point]" },
  { 0x7F, L"\u00cc" },
  { 0x80, L"\u00ce" },
  { 0x81, L"\u00cf" },
  { 0x82, L"\u00ed" },
  { 0x83, L"\u00ec" },
  { 0x84, L"\u00ee" },
  { 0x85, L"\u00ef" },
  { 0x86, L"\u00d3" },
  { 0x87, L"\u00d2" },
  { 0x88, L"\u00d4" },
  { 0x89, L"\u00d6" },
  { 0x8A, L"\u00f3" },
  { 0x8B, L"\u00f2" },
  { 0x8C, L"\u00f4" },
  { 0x8D, L"\u00f6" },
  { 0x8E, L"\u00da" },
  { 0x8F, L"\u00d9" },
  { 0x90, L"\u00db" },
  { 0x91, L"\u00dc" },
  { 0x92, L"\u00fa" },
  { 0x93, L"\u00f9" },
  { 0x94, L"\u00fb" },
  { 0x95, L"\u00fc" },
  { 0x96, L"\u00c7" },
  { 0x97, L"\u00e7" },
  { 0x98, L"\u00d1" },
  { 0x99, L"\u00f1" },
  { 0x9A, L"\u00b4" },
  { 0x9B, L"`" },
  { 0x9C, L"\u00a8" },
  { 0x9D, L"\u00bf" },
  { 0x9E, L"\u00a1" },
  { 0x9F, L"\u03b1" },
  { 0xA0, L"\u03b2" },
  { 0xA1, L"\u03b3" },
  { 0xA2, L"\u0394" },
  { 0xA3, L"\u03b4" },
  { 0xA4, L"\u03b5" },
  { 0xA5, L"\u03bb" },
  { 0xA6, L"\u03bc" },
  { 0xA7, L"\u03c0" },
  { 0xA8, L"\u03c1" },
  { 0xA9, L"\u03a3" },
  { 0xAA, L"[error: unused code point]" },
  { 0xAB, L"\u03c6" },
  { 0xAC, L"\u03a9" },
  { 0xAD, L"p^" },
  { 0xAE, L"\u03c7" },
  { 0xAF, L"F" },
  { 0xB0, L"a" },
  { 0xB1, L"b" },
  { 0xB2, L"c" },
  { 0xB3, L"d" },
  { 0xB4, L"e" },
  { 0xB5, L"f" },
  { 0xB6, L"g" },
  { 0xB7, L"h" },
  { 0xB8, L"i" },
  { 0xB9, L"j" },
  { 0xBA, L"k" },
  { 0xBB, L"[error: unused code point]" },
  { 0xBC, L"l" },
  { 0xBD, L"m" },
  { 0xBE, L"n" },
  { 0xBF, L"o" },
  { 0xC0, L"p" },
  { 0xC1, L"q" },
  { 0xC2, L"r" },
  { 0xC3, L"s" },
  { 0xC4, L"t" },
  { 0xC5, L"u" },
  { 0xC6, L"v" },
  { 0xC7, L"w" },
  { 0xC8, L"x" },
  { 0xC9, L"y" },
  { 0xCA, L"z" },
  { 0xCB, L"\u03c3" },
  { 0xCC, L"\u03c4" },
  { 0xCD, L"\u00cd" },
  { 0xCE, L"GarbageCollect" },
  { 0xCF, L"~" },
  { 0xD0, L"reserved" },
  { 0xD1, L"@" },
  { 0xD2, L"#" },
  { 0xD3, L"$" },
  { 0xD4, L"&" },
  { 0xD5, L"`" },
  { 0xD6, L";" },
  { 0xD7, L"\\" },
  { 0xD8, L"|" },
  { 0xD9, L"_" },
  { 0xDA, L"%%" },
  { 0xDB, L"\u2026" },
  { 0xDC, L"\u2220" },
  { 0xDD, L"\u00df" },
  { 0xDE, L"x" },
  { 0xDF, L"T" },
  { 0xE0, L"0" },
  { 0xE1, L"1" },
  { 0xE2, L"2" },
  { 0xE3, L"3" },
  { 0xE4, L"4" },
  { 0xE5, L"5" },
  { 0xE6, L"6" },
  { 0xE7, L"7" },
  { 0xE8, L"8" },
  { 0xE9, L"9" },
  { 0xEA, L"10" },
  { 0xEB, L"\u2190" },
  { 0xEC, L"\u2192" },
  { 0xED, L"\u2191" },
  { 0xEE, L"\u2193" },
  { 0xEF, L"[error: unused code point]" },
  { 0xF0, L"x" },
  { 0xF1, L"\u222b" },
  { 0xF2, L"[up arrow]" },
  { 0xF3, L"[down arrow]" },
  { 0xF4, L"\u221a" },
  { 0xF5, L"[equals block]" },
  { 0xF6, L"[error: unused code point]" },
  { 0xF7, L"[error: unused code point]" },
  { 0xF8, L"[error: unused code point]" },
  { 0xF9, L"[error: unused code point]" },
  { 0xFA, L"[error: unused code point]" },
  { 0xFB, L"[error: unused code point]" },
  { 0xFC, L"[error: unused code point]" },
  { 0xFD, L"[error: unused code point]" },
  { 0xFE, L"[error: unused code point]" },
  { 0xFF, L"[error: unused code point]" }
};

#endif // !MISCTOKENS_HPP
